# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import trillian_log_api_pb2 as trillian__log__api__pb2


class TrillianLogStub(object):
  """TrillianLog defines a service that can provide access to a Verifiable Log as defined in the
  Verifiable Data Structures paper. It provides direct access to a subset of storage APIs
  (for handling reads) and provides Log level ones such as being able to obtain proofs.
  Clients cannot directly modify the log data via this API.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.QueueLeaf = channel.unary_unary(
        '/trillian.TrillianLog/QueueLeaf',
        request_serializer=trillian__log__api__pb2.QueueLeafRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.QueueLeafResponse.FromString,
        )
    self.GetInclusionProof = channel.unary_unary(
        '/trillian.TrillianLog/GetInclusionProof',
        request_serializer=trillian__log__api__pb2.GetInclusionProofRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetInclusionProofResponse.FromString,
        )
    self.GetInclusionProofByHash = channel.unary_unary(
        '/trillian.TrillianLog/GetInclusionProofByHash',
        request_serializer=trillian__log__api__pb2.GetInclusionProofByHashRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetInclusionProofByHashResponse.FromString,
        )
    self.GetConsistencyProof = channel.unary_unary(
        '/trillian.TrillianLog/GetConsistencyProof',
        request_serializer=trillian__log__api__pb2.GetConsistencyProofRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetConsistencyProofResponse.FromString,
        )
    self.GetLatestSignedLogRoot = channel.unary_unary(
        '/trillian.TrillianLog/GetLatestSignedLogRoot',
        request_serializer=trillian__log__api__pb2.GetLatestSignedLogRootRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetLatestSignedLogRootResponse.FromString,
        )
    self.GetSequencedLeafCount = channel.unary_unary(
        '/trillian.TrillianLog/GetSequencedLeafCount',
        request_serializer=trillian__log__api__pb2.GetSequencedLeafCountRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetSequencedLeafCountResponse.FromString,
        )
    self.GetEntryAndProof = channel.unary_unary(
        '/trillian.TrillianLog/GetEntryAndProof',
        request_serializer=trillian__log__api__pb2.GetEntryAndProofRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetEntryAndProofResponse.FromString,
        )
    self.QueueLeaves = channel.unary_unary(
        '/trillian.TrillianLog/QueueLeaves',
        request_serializer=trillian__log__api__pb2.QueueLeavesRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.QueueLeavesResponse.FromString,
        )
    self.GetLeavesByIndex = channel.unary_unary(
        '/trillian.TrillianLog/GetLeavesByIndex',
        request_serializer=trillian__log__api__pb2.GetLeavesByIndexRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetLeavesByIndexResponse.FromString,
        )
    self.GetLeavesByHash = channel.unary_unary(
        '/trillian.TrillianLog/GetLeavesByHash',
        request_serializer=trillian__log__api__pb2.GetLeavesByHashRequest.SerializeToString,
        response_deserializer=trillian__log__api__pb2.GetLeavesByHashResponse.FromString,
        )


class TrillianLogServicer(object):
  """TrillianLog defines a service that can provide access to a Verifiable Log as defined in the
  Verifiable Data Structures paper. It provides direct access to a subset of storage APIs
  (for handling reads) and provides Log level ones such as being able to obtain proofs.
  Clients cannot directly modify the log data via this API.
  """

  def QueueLeaf(self, request, context):
    """QueueLeaf adds a single leaf to the queue.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetInclusionProof(self, request, context):
    """No direct equivalent at the storage level
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetInclusionProofByHash(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetConsistencyProof(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLatestSignedLogRoot(self, request, context):
    """Corresponds to the LogRootReader API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSequencedLeafCount(self, request, context):
    """Corresponds to the LeafReader API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetEntryAndProof(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def QueueLeaves(self, request, context):
    """
    Batch APIS


    Corresponds to the LeafQueuer API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLeavesByIndex(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLeavesByHash(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TrillianLogServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'QueueLeaf': grpc.unary_unary_rpc_method_handler(
          servicer.QueueLeaf,
          request_deserializer=trillian__log__api__pb2.QueueLeafRequest.FromString,
          response_serializer=trillian__log__api__pb2.QueueLeafResponse.SerializeToString,
      ),
      'GetInclusionProof': grpc.unary_unary_rpc_method_handler(
          servicer.GetInclusionProof,
          request_deserializer=trillian__log__api__pb2.GetInclusionProofRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetInclusionProofResponse.SerializeToString,
      ),
      'GetInclusionProofByHash': grpc.unary_unary_rpc_method_handler(
          servicer.GetInclusionProofByHash,
          request_deserializer=trillian__log__api__pb2.GetInclusionProofByHashRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetInclusionProofByHashResponse.SerializeToString,
      ),
      'GetConsistencyProof': grpc.unary_unary_rpc_method_handler(
          servicer.GetConsistencyProof,
          request_deserializer=trillian__log__api__pb2.GetConsistencyProofRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetConsistencyProofResponse.SerializeToString,
      ),
      'GetLatestSignedLogRoot': grpc.unary_unary_rpc_method_handler(
          servicer.GetLatestSignedLogRoot,
          request_deserializer=trillian__log__api__pb2.GetLatestSignedLogRootRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetLatestSignedLogRootResponse.SerializeToString,
      ),
      'GetSequencedLeafCount': grpc.unary_unary_rpc_method_handler(
          servicer.GetSequencedLeafCount,
          request_deserializer=trillian__log__api__pb2.GetSequencedLeafCountRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetSequencedLeafCountResponse.SerializeToString,
      ),
      'GetEntryAndProof': grpc.unary_unary_rpc_method_handler(
          servicer.GetEntryAndProof,
          request_deserializer=trillian__log__api__pb2.GetEntryAndProofRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetEntryAndProofResponse.SerializeToString,
      ),
      'QueueLeaves': grpc.unary_unary_rpc_method_handler(
          servicer.QueueLeaves,
          request_deserializer=trillian__log__api__pb2.QueueLeavesRequest.FromString,
          response_serializer=trillian__log__api__pb2.QueueLeavesResponse.SerializeToString,
      ),
      'GetLeavesByIndex': grpc.unary_unary_rpc_method_handler(
          servicer.GetLeavesByIndex,
          request_deserializer=trillian__log__api__pb2.GetLeavesByIndexRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetLeavesByIndexResponse.SerializeToString,
      ),
      'GetLeavesByHash': grpc.unary_unary_rpc_method_handler(
          servicer.GetLeavesByHash,
          request_deserializer=trillian__log__api__pb2.GetLeavesByHashRequest.FromString,
          response_serializer=trillian__log__api__pb2.GetLeavesByHashResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'trillian.TrillianLog', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
